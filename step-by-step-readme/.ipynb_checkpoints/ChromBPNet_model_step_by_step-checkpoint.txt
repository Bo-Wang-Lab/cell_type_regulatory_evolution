# Step by step read me for ChromBPNet training
# Github link used: https://github.com/kundajelab/chrombpnet/tree/v1.3-pre-release

dir = 'path/to/ChromBPNet/SpeciesA/'

# Create chromsize file from fasta 
faidx dir/reference/SpeciesA_genome.fasta -i chromsizes > dir/reference/SpeciesA.chrom.sizes

# Ensure that fragment files have +4/-4 shifts before making bigwig coverage files; coverage files are created for all cell type familes within species A

# if fragment files needed to be shifted: 
cd dir/coverage_files/
ls *.tsv.gz | sed -n 's/\.tsv.gz$//p' | parallel "zcat {}.tsv.gz | awk 'BEGIN { FS = OFS = "\t" } {$3+=1}1' > {}.shifted.tsv"

# if fragment files don't need to be shifted, continue below. 

ls *.shifted.tsv.gz | sed -n 's/\.tsv.gz$//p' | parallel "bedtools genomecov -bg -5 -i {}.tsv.gz -g dir/reference/SpeciesA.chrom.sizes > {}.bg"

ls *.bg | sed -n 's/\.bg$//p' | parallel "bedtools sort -i {}.bg > {}.sorted.bg"

ls *.sorted.bg | sed -n 's/\.sorted.bg$//p' | parallel "bedGraphToBigWig {}.sorted.bg dir/reference/SpeciesA.chrom.sizes {}_unstranded.bw"

# Creating multiple chr-split folds for train/test/validation. This is generated using entire dataset that includes all cell types 
# itoverlap_peaks.narrowPeak file is generated using peakcalling_consensus_step_by_step.txt
# allcelltype_unstranded.bw is generated by merging all the celltypes bigwig generated above.

python make_folds.py --chrom_sizes dir/reference/SpeciesA.chrom.sizes --peak_file dir/peaks/itoverlap_peaks.narrowPeak --bigwig_file dir/coverage_files/allcelltype_unstranded.bw --data_type narrowPeak --output_dir dir/chr_split/


# From this point on, we will be demonstrating how we train cell type family A of speices A, and denote as Family_A 

# To ensure that the coverage files are shifted correctly as well as to check Tn5 motif pwm: 
python build_pwm_from_bigwig.py -i dir/coverage_files/Family_A_unstranded.bw -g dir/reference/SpeciesA_genome.fa -o dir/coverage_files/Tn5_pwm -c chr1 -cz dir/reference/SpeciesA.chrom.sizes -pw 24


# While training bias model, to ensure that only non-peak regions across entire genome from all cell types are considered, consensus peaks are merged as followed. But for training chrompbnet model, blacklist were just empty blacklist.bed.gz as flatworms and cnidarians don't have pre-defined blacklist.  

bedtools merge -i dir/peaks/itoverlap_peaks.narrowPeak > dir/peaks/allpeak_regions.bed 

# Generating gc-matched background regions (non-peaks)
chrombpnet_genomewide_gc -g dir/reference/SpeciesA_genome.fa -o dir/reference/genomewide_gc_inputlen_2114_stride_100 -f 2114 -s 100

mkdir dir/negatives/

# For bias model
step3_get_background_regions.sh dir/reference/SpeicesA_genome.fa dir/reference/SpeciesA.chrom.sizes dir/peaks/allpeak_regions.bed.gz Family_A_peak.narrowPeak.gz 2114 dir/reference/genomewide_gc_inputlen_2114_stride_100.bed dir/negatives/bias_neg dir/chr_split/fold_0.json

# For chrombpnet model per cell type: 

step3_get_background_regions.sh dir/reference/SpeciesA_genome.fa dir/reference/SpeciesA.chrom.sizes dir/peaks/blacklist.bed.gz dir/Family_A_peak.narrowPeak.gz 2114 dir/reference/genomewide_gc_inputlen_2114_stride_100.bed dir/negatives/FamilyA_neg dir/chr_split/fold_0.json

# Training bias model  

mkdir dir/bias_model

step4_train_bias_model.sh dir/SpeicesA_genome.fa dir/coverage_files/Family_A_unstranded.bw dir/peaks/Family_A_peak.narrowPeak.gz dir/negatives/FamilyA_neg/negatives_with_summit.bed dir/chr_split/fold_0.json 0.5 dir/bias_model

# Interpreting the bias model to ensure that only PWMs of enzyme bias is learned but not known TF motif logos. 
# As mentioned in the ChromBPNet pipeline, we subsample the peaks to 30K to check for motifs that the bias model learn, which should only corresponds to Tn5 motifs

shuf -n 30000 dir/peaks/Family_A_peak.narrowPeak.gz > dir/peaks/30K_subsample_Family_A_peak.narrowPeak

mkdir dir/bias_model/interpret

step5_interpret_bias_model.sh dir/reference/SpeciesA_genome.fa dir/peaks/30K_subsample_Family_A_peak.narrowPeak dir/bias_model/bias.h5 dir/bias_model/interpret/


# Training chrombpnet model 

mkdir dir/chrombpnet_model/Family_A

step6_train_chrombpnet_model.sh dir/reference/SpeciesA_genome.fa dir/coverage_files/Family_A_unstranded.bw dir/peaks/Family_A_peak.narrowPeak.gz dir/negatives/FamilyA_neg/negatives_with_summit.bed dir/chr_split/fold_0.json dir/bias_model/bias.h5 dir/chrombpnet_model/Family_A ATAC_PE

# Interpreting the chrombpnet model to ensure that we learn known TF motif logos but not the Tn5 bias 
# Similar to bias model, we subsample the peaks to 30K to check for motifs that the model learn

mkdir dir/chrombpnet_model/Family_A/interpret 

step7_interpret_chrombpnet_model.sh  dir/reference/SpeciesA_genome.fa dir/peaks/30K_subsample_Family_A_peak.narrowPeak dir/chrombpnet_model/Family_A/chrombpnet_wo_bias.h5 dir/chrombpnet_model/Family_A/interpret/

# We then check the response of Tn5 motif logos in chrombpnet model to ensure that the response is < 0.003. Once that is confirmed, we adapted step7_interpret_chrombpnet_model.sh to run DeepSHAP for interpretation and then run TF-MoDISco-lite on the entire consensus itoverlap peak set as it is compuationally more efficient: 

# First, we comment out the TF-modisco part in step7_interpret_chrombpnet_model.sh
step7_interpret_chrombpnet_model.sh  dir/reference/SpeciesA_genome.fa dir/peaks/itoverlap_peaks.narrowPeak dir/chrombpnet_model/Family_A/chrombpnet_wo_bias.h5 dir/chrombpnet_model/Family_A/interpret_full/

# To run TF-MoDISco-lite with a few modification in the source code for final_min_cluster_size=10, trim_to_window_size=15: 
modisco motifs -i dir/chrombpnet_model/Family_A/interpret_full/interpret_full.h5 -n 200000 -o dir/chrombpnet_model/Family_A/interpret_full/modisco_full.h5 
 
# modisco_full.h5 outputs from all cell type families of all three speices were then passed into pfm_extraction.ipynb




